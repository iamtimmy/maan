# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(maan
	LANGUAGES
		C
		CXX
)

include(FetchContent)

message(STATUS "Fetching Catch2 (v3.5.4)...")
FetchContent_Declare(Catch2
	GIT_REPOSITORY
		"https://github.com/catchorg/Catch2"
	GIT_TAG
		v3.5.4
)
FetchContent_MakeAvailable(Catch2)

# Target: maan
set(maan_SOURCES
	"src/include/maan.hpp"
	"src/include/maan/aggregate.hpp"
	"src/include/maan/function.hpp"
	"src/include/maan/native_function.hpp"
	"src/include/maan/operations.hpp"
	"src/include/maan/stack.hpp"
	"src/include/maan/table.hpp"
	"src/include/maan/utilities.hpp"
	"src/include/maan/vm.hpp"
	"src/include/maan/vm_function.hpp"
	"src/include/maan/vm_table.hpp"
	"src/include/maan/vm_type_tag.hpp"
	"src/include/maan/vm_types.hpp"
)

add_library(maan INTERFACE)

target_sources(maan INTERFACE ${maan_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${maan_SOURCES})

target_compile_features(maan INTERFACE
	cxx_std_23
)

target_include_directories(maan INTERFACE
	"luajit/include"
	"src/include"
)

target_link_libraries(maan INTERFACE
	lua51
)

# Target: tests
set(tests_SOURCES
	"tests/aggregate_type.cpp"
	"tests/basic_pointer_type.cpp"
	"tests/basic_types.cpp"
	"tests/code.cpp"
	"tests/error_code.cpp"
	"tests/functions.cpp"
	"tests/main.cpp"
	"tests/stack.cpp"
	"tests/tables.cpp"
	cmake.toml
)

add_executable(tests)

target_sources(tests PRIVATE ${tests_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${tests_SOURCES})

target_compile_features(tests PRIVATE
	cxx_std_23
)

if(CMAKE_SIZEOF_VOID_P EQUAL 8) # x64
	target_link_directories(tests PRIVATE
		"luajit/x64/lib"
	)
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 4) # x32
	target_link_directories(tests PRIVATE
		"luajit/x32/lib"
	)
endif()

target_link_libraries(tests PRIVATE
	Catch2::Catch2WithMain
	maan
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT tests)
endif()

set(CMKR_TARGET tests)
list(APPEND CMAKE_MODULE_PATH ${catch2_SOURCE_DIR}/extras)
include(CTest)
include(Catch)
catch_discover_tests(tests)

